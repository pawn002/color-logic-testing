{
    "pipes": [],
    "interfaces": [
        {
            "name": "ApcaColorVariantsObj",
            "id": "interface-ApcaColorVariantsObj-3d440e19a096d69aafbd0e6150a37e26247560299c14261161f4208a677c78ce2d324eee3b502663be9a8bb58bfcaa588206f013f6be1dfb87148703440bec4f",
            "file": "src/app/services/color-util.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { uniq } from 'lodash';\r\n\r\n// import Color from 'colorjs.io';\r\nimport Color from 'colorjs.io';\r\n\r\nexport interface ApcaColorVariantsObj {\r\n  [key: number]: Array<string>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  baseWhite = 'white';\r\n  baseBlack = '#28231d';\r\n  cjsWhite = new Color(this.baseWhite);\r\n  cjsBlack = new Color(this.baseBlack);\r\n\r\n  greyRamp = this.cjsWhite.range(this.cjsBlack, { space: 'oklab' });\r\n\r\n  apcaVals: Array<number> = [];\r\n\r\n  populateApcaVals() {\r\n    for (let i = 0; i <= 108; i++) {\r\n      this.apcaVals.push(i);\r\n    }\r\n  }\r\n\r\n  colorAsHex(color: any): string {\r\n    let hex: string;\r\n\r\n    hex = color.to('srgb', { inGamut: true }).toString({ format: 'hex' });\r\n\r\n    return hex;\r\n  }\r\n\r\n  filterAndFormatColors(\r\n    colorCollection: Array<any>,\r\n    bkgdColor: any,\r\n    lowerLimit: number,\r\n    ceiling: number\r\n  ) {\r\n    let group = [];\r\n\r\n    for (let i = 0; i < colorCollection.length; i++) {\r\n      const color = colorCollection[i];\r\n      const apcaContrast = Math.abs(color.contrast(bkgdColor, 'APCA'));\r\n\r\n      if (apcaContrast >= lowerLimit && apcaContrast < ceiling) {\r\n        group.push(this.colorAsHex(color));\r\n      }\r\n    }\r\n\r\n    return group;\r\n  }\r\n\r\n  assignAspcaValKeys(object: ApcaColorVariantsObj) {\r\n    this.apcaVals.forEach((val) => {\r\n      object[val] = [];\r\n    });\r\n  }\r\n\r\n  getGreyForegroundColors(bkgdColor: string): ApcaColorVariantsObj {\r\n    let fgColors: ApcaColorVariantsObj;\r\n\r\n    // using a create a ramp\r\n    // create all colors\r\n    const numVariants = 256;\r\n    const interval = 1 / numVariants;\r\n    let initGreys = [];\r\n    let greyVariants: ApcaColorVariantsObj = {};\r\n\r\n    this.assignAspcaValKeys(greyVariants);\r\n\r\n    for (let i = 0; i < numVariants; i++) {\r\n      const grey = this.greyRamp(interval * i);\r\n\r\n      initGreys.push(grey);\r\n    }\r\n\r\n    // filter in usable buckets\r\n    for (let i = 0; i < this.apcaVals.length; i++) {\r\n      const maxApcaVal = 108;\r\n      const key = this.apcaVals[i];\r\n      const nextKey =\r\n        this.apcaVals[i + 1] === maxApcaVal\r\n          ? maxApcaVal + 1\r\n          : this.apcaVals[i + 1];\r\n\r\n      greyVariants[key] = this.filterAndFormatColors(\r\n        initGreys,\r\n        bkgdColor,\r\n        key,\r\n        nextKey\r\n      );\r\n    }\r\n\r\n    fgColors = greyVariants;\r\n\r\n    return fgColors;\r\n  }\r\n\r\n  getFontColors(options: {\r\n    font: {\r\n      size: number;\r\n      weight: number;\r\n      body: boolean;\r\n    };\r\n  }): Array<string> {\r\n    let color: Array<string>;\r\n\r\n    color = [];\r\n\r\n    return color;\r\n  }\r\n\r\n  getObjectColors(\r\n    bkgdColor: string,\r\n    options: { minDimension: number }\r\n  ): Array<string> {\r\n    let objectColors: Array<string> = [];\r\n\r\n    const o = options;\r\n    const dimension = o.minDimension;\r\n\r\n    let contrast: number = 90;\r\n\r\n    const cSlope = 94.3;\r\n\r\n    const power = -0.595;\r\n\r\n    const objContrast = (size: number) => {\r\n      return Math.round(Math.pow(size, power) * cSlope);\r\n    };\r\n\r\n    contrast = objContrast(dimension);\r\n\r\n    contrast = contrast < 15 ? 15 : contrast;\r\n    contrast = contrast > 100 ? 100 : contrast;\r\n\r\n    console.log('objSize ' + dimension, 'contrast ' + contrast);\r\n\r\n    const colors = this.getGreyForegroundColors(bkgdColor);\r\n\r\n    objectColors = contrast ? colors[contrast] : objectColors;\r\n\r\n    return objectColors;\r\n  }\r\n\r\n  constructor() {\r\n    this.populateApcaVals();\r\n  }\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-3d440e19a096d69aafbd0e6150a37e26247560299c14261161f4208a677c78ce2d324eee3b502663be9a8bb58bfcaa588206f013f6be1dfb87148703440bec4f",
                    "args": [
                        {
                            "name": "key",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Array<string>",
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "User",
            "id": "interface-User-9c7e5f1bbbab702cb032307d130876cb68969b0cd4eedef32a0c8cad8081a54e5f8f577ed6ad4539c1b99a1d246cb34031d198c2ea8eba440e64e91b14f01fdc",
            "file": "src/stories/User.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "ColorUtilService",
            "id": "injectable-ColorUtilService-3d440e19a096d69aafbd0e6150a37e26247560299c14261161f4208a677c78ce2d324eee3b502663be9a8bb58bfcaa588206f013f6be1dfb87148703440bec4f",
            "file": "src/app/services/color-util.service.ts",
            "properties": [
                {
                    "name": "apcaVals",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<number>",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "baseBlack",
                    "defaultValue": "'#28231d'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "baseWhite",
                    "defaultValue": "'white'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "cjsBlack",
                    "defaultValue": "new Color(this.baseBlack)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "cjsWhite",
                    "defaultValue": "new Color(this.baseWhite)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "greyRamp",
                    "defaultValue": "this.cjsWhite.range(this.cjsBlack, { space: 'oklab' })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                }
            ],
            "methods": [
                {
                    "name": "assignAspcaValKeys",
                    "args": [
                        {
                            "name": "object",
                            "type": "ApcaColorVariantsObj",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "object",
                            "type": "ApcaColorVariantsObj",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "colorAsHex",
                    "args": [
                        {
                            "name": "color",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "filterAndFormatColors",
                    "args": [
                        {
                            "name": "colorCollection",
                            "type": "Array<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "bkgdColor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "lowerLimit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "ceiling",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "colorCollection",
                            "type": "Array<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "bkgdColor",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "lowerLimit",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "ceiling",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFontColors",
                    "args": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getGreyForegroundColors",
                    "args": [
                        {
                            "name": "bkgdColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ApcaColorVariantsObj",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bkgdColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getObjectColors",
                    "args": [
                        {
                            "name": "bkgdColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Array<string>",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bkgdColor",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "populateApcaVals",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\nimport { uniq } from 'lodash';\r\n\r\n// import Color from 'colorjs.io';\r\nimport Color from 'colorjs.io';\r\n\r\nexport interface ApcaColorVariantsObj {\r\n  [key: number]: Array<string>;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ColorUtilService {\r\n  baseWhite = 'white';\r\n  baseBlack = '#28231d';\r\n  cjsWhite = new Color(this.baseWhite);\r\n  cjsBlack = new Color(this.baseBlack);\r\n\r\n  greyRamp = this.cjsWhite.range(this.cjsBlack, { space: 'oklab' });\r\n\r\n  apcaVals: Array<number> = [];\r\n\r\n  populateApcaVals() {\r\n    for (let i = 0; i <= 108; i++) {\r\n      this.apcaVals.push(i);\r\n    }\r\n  }\r\n\r\n  colorAsHex(color: any): string {\r\n    let hex: string;\r\n\r\n    hex = color.to('srgb', { inGamut: true }).toString({ format: 'hex' });\r\n\r\n    return hex;\r\n  }\r\n\r\n  filterAndFormatColors(\r\n    colorCollection: Array<any>,\r\n    bkgdColor: any,\r\n    lowerLimit: number,\r\n    ceiling: number\r\n  ) {\r\n    let group = [];\r\n\r\n    for (let i = 0; i < colorCollection.length; i++) {\r\n      const color = colorCollection[i];\r\n      const apcaContrast = Math.abs(color.contrast(bkgdColor, 'APCA'));\r\n\r\n      if (apcaContrast >= lowerLimit && apcaContrast < ceiling) {\r\n        group.push(this.colorAsHex(color));\r\n      }\r\n    }\r\n\r\n    return group;\r\n  }\r\n\r\n  assignAspcaValKeys(object: ApcaColorVariantsObj) {\r\n    this.apcaVals.forEach((val) => {\r\n      object[val] = [];\r\n    });\r\n  }\r\n\r\n  getGreyForegroundColors(bkgdColor: string): ApcaColorVariantsObj {\r\n    let fgColors: ApcaColorVariantsObj;\r\n\r\n    // using a create a ramp\r\n    // create all colors\r\n    const numVariants = 256;\r\n    const interval = 1 / numVariants;\r\n    let initGreys = [];\r\n    let greyVariants: ApcaColorVariantsObj = {};\r\n\r\n    this.assignAspcaValKeys(greyVariants);\r\n\r\n    for (let i = 0; i < numVariants; i++) {\r\n      const grey = this.greyRamp(interval * i);\r\n\r\n      initGreys.push(grey);\r\n    }\r\n\r\n    // filter in usable buckets\r\n    for (let i = 0; i < this.apcaVals.length; i++) {\r\n      const maxApcaVal = 108;\r\n      const key = this.apcaVals[i];\r\n      const nextKey =\r\n        this.apcaVals[i + 1] === maxApcaVal\r\n          ? maxApcaVal + 1\r\n          : this.apcaVals[i + 1];\r\n\r\n      greyVariants[key] = this.filterAndFormatColors(\r\n        initGreys,\r\n        bkgdColor,\r\n        key,\r\n        nextKey\r\n      );\r\n    }\r\n\r\n    fgColors = greyVariants;\r\n\r\n    return fgColors;\r\n  }\r\n\r\n  getFontColors(options: {\r\n    font: {\r\n      size: number;\r\n      weight: number;\r\n      body: boolean;\r\n    };\r\n  }): Array<string> {\r\n    let color: Array<string>;\r\n\r\n    color = [];\r\n\r\n    return color;\r\n  }\r\n\r\n  getObjectColors(\r\n    bkgdColor: string,\r\n    options: { minDimension: number }\r\n  ): Array<string> {\r\n    let objectColors: Array<string> = [];\r\n\r\n    const o = options;\r\n    const dimension = o.minDimension;\r\n\r\n    let contrast: number = 90;\r\n\r\n    const cSlope = 94.3;\r\n\r\n    const power = -0.595;\r\n\r\n    const objContrast = (size: number) => {\r\n      return Math.round(Math.pow(size, power) * cSlope);\r\n    };\r\n\r\n    contrast = objContrast(dimension);\r\n\r\n    contrast = contrast < 15 ? 15 : contrast;\r\n    contrast = contrast > 100 ? 100 : contrast;\r\n\r\n    console.log('objSize ' + dimension, 'contrast ' + contrast);\r\n\r\n    const colors = this.getGreyForegroundColors(bkgdColor);\r\n\r\n    objectColors = contrast ? colors[contrast] : objectColors;\r\n\r\n    return objectColors;\r\n  }\r\n\r\n  constructor() {\r\n    this.populateApcaVals();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 150
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-9c06eace25d99604f5122f8094b8596189fd34b5e8a997d04a0a836a92f101e8f5043a0c956c424d2a0d4cf7dc4c541cd420e898e746f05795657ee1a4213508",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'color-logic-testing'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'color-logic-testing';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<nav>\r\n  <ol>\r\n    <li><a href=\"\">link</a></li>\r\n  </ol>\r\n</nav>\r\n\r\n<hr />\r\n\r\n<app-colorjs-view></app-colorjs-view>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4ef205c97a334c309aa4001c8ab4a6d9571dcae18d0e85aaf0d367467ab5d3a9f13ab3573726f1fcb409bc9b49894dadfb80b1bbe1b6ba7041455ad9d4922004",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nWhat background color to use\n",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 711,
                            "end": 724,
                            "flags": 4227072,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "kind": 325,
                            "tagName": {
                                "pos": 712,
                                "end": 720,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nIs this the principal call to action on the page?\n",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nHow large should the button be?\n",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nOptional click handler\n",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  template: ` <button\n    type=\"button\"\n    (click)=\"onClick.emit($event)\"\n    [ngClass]=\"classes\"\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\n  >\n    {{ label }}\n  </button>`,\n  styleUrls: ['./button.css'],\n})\nexport default class ButtonComponent {\n  /**\n   * Is this the principal call to action on the page?\n   */\n  @Input()\n  primary = false;\n\n  /**\n   * What background color to use\n   */\n  @Input()\n  backgroundColor?: string;\n\n  /**\n   * How large should the button be?\n   */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /**\n   * Optional click handler\n   */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-weight: 700;\n  border: 0;\n  border-radius: 3em;\n  cursor: pointer;\n  display: inline-block;\n  line-height: 1;\n}\n.storybook-button--primary {\n  color: white;\n  background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n  color: #333;\n  background-color: transparent;\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n  font-size: 12px;\n  padding: 10px 16px;\n}\n.storybook-button--medium {\n  font-size: 14px;\n  padding: 11px 20px;\n}\n.storybook-button--large {\n  font-size: 16px;\n  padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "ChromajsViewComponent",
            "id": "component-ChromajsViewComponent-8bd3a5ef53a599da8ef540f433bb31e693c7c1d25db906c08598eaebd0eef5e2d9c49befe91e315938d7a78220a16656e37d4c761e6943c1d495a124c539fc5e",
            "file": "src/app/chromajs-view/chromajs-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-chromajs-view",
            "styleUrls": [
                "./chromajs-view.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./chromajs-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "testGradient",
                    "args": [
                        {
                            "name": "color1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "chroma.Scale | void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color1",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color2",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "typingsTest",
                    "args": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n// importing all of chroma.js to speed testing\r\nimport * as chroma from 'chroma-js';\r\n\r\n@Component({\r\n  selector: 'app-chromajs-view',\r\n  templateUrl: './chromajs-view.component.html',\r\n  styleUrls: ['./chromajs-view.component.css'],\r\n})\r\nexport class ChromajsViewComponent implements OnInit {\r\n  // test simple oklab output\r\n  typingsTest(color: string): boolean {\r\n    //  NOTE: typings not updated for chroma-js 2.4ish as 2MAY2022@0956\r\n    // @ts-ignore\r\n    console.table(color, chroma(color).oklab());\r\n\r\n    return false;\r\n  }\r\n\r\n  testGradient(color1: string, color2: string): chroma.Scale | void {\r\n    if (!chroma.valid(color1) || !chroma.valid(color1)) {\r\n      console.error('invalid color');\r\n    } else {\r\n      //  NOTE: typings not updated for chroma-js 2.4ish as 2MAY2022@0956\r\n      // @ts-ignore\r\n      const scale_oklab = chroma.scale([color1, color2]).mode('oklab');\r\n\r\n      return scale_oklab;\r\n    }\r\n  }\r\n\r\n  constructor() {\r\n    this.typingsTest('black');\r\n\r\n    this.testGradient('white', 'blue');\r\n  }\r\n\r\n  ngOnInit(): void { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./chromajs-view.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 30
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h1><code>chroma.js</code></h1>\r\n"
        },
        {
            "name": "ColorjsViewComponent",
            "id": "component-ColorjsViewComponent-36c7046c94eb17ca51e6edf5aa1a3641fd0128c0a9bd562cc0cc366b354b1e703962996cb66bea84418a4eadb6c25d3d5886b5ae45d3d4a938a9389c28a33315",
            "file": "src/app/colorjs-view/colorjs-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-colorjs-view",
            "styleUrls": [
                "./colorjs-view.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./colorjs-view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "greys",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApcaColorVariantsObj",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "adjustBodyColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "adjustElementColor",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "color",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "adjustHeaderColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "adjustObjectColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "adjustTertiaryTextColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setbkgdColor",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, AfterViewInit } from '@angular/core';\r\nimport {\r\n  ColorUtilService,\r\n  ApcaColorVariantsObj,\r\n} from '../services/color-util.service';\r\n\r\n@Component({\r\n  selector: 'app-colorjs-view',\r\n  templateUrl: './colorjs-view.component.html',\r\n  styleUrls: ['./colorjs-view.component.css'],\r\n})\r\nexport class ColorjsViewComponent implements OnInit, AfterViewInit {\r\n  greys: ApcaColorVariantsObj = {};\r\n\r\n  setbkgdColor() {\r\n    let root = document.documentElement;\r\n\r\n    root.style.setProperty('--bkgdColor', this.cus.baseWhite);\r\n  }\r\n\r\n  adjustHeaderColor() {\r\n    let root = document.documentElement;\r\n    root.style.setProperty('--headerColor', this.greys['90'][0]);\r\n  }\r\n\r\n  adjustBodyColor() {\r\n    let root = document.documentElement;\r\n    root.style.setProperty('--bodyColor', this.greys['75'][0]);\r\n  }\r\n\r\n  adjustTertiaryTextColor() {\r\n    let root = document.documentElement;\r\n    root.style.setProperty('--tertiaryTextColor', this.greys['100'][0]);\r\n  }\r\n\r\n  adjustObjectColor() {\r\n    let root = document.documentElement;\r\n    root.style.setProperty('--objectColor', this.greys['15'][0]);\r\n  }\r\n\r\n  adjustElementColor(id: string, color: string) {\r\n    const elem = document.getElementById(id);\r\n\r\n    if (elem) {\r\n      elem.style.color = color;\r\n    } else {\r\n      alert('no elem for: ' + id);\r\n    }\r\n  }\r\n\r\n  constructor(private cus: ColorUtilService) {\r\n    this.greys = this.cus.getGreyForegroundColors('white');\r\n  }\r\n\r\n  ngOnInit(): void {}\r\n\r\n  ngAfterViewInit(): void {\r\n    this.setbkgdColor();\r\n\r\n    this.adjustHeaderColor();\r\n    this.adjustBodyColor();\r\n    this.adjustTertiaryTextColor();\r\n    this.adjustObjectColor();\r\n\r\n    this.adjustElementColor('s14-400', this.greys['100'][0]);\r\n    this.adjustElementColor('s14-700', this.greys['75'][0]);\r\n\r\n    this.adjustElementColor('s21-400', this.greys['70'][0]);\r\n    this.adjustElementColor('s21-700', this.greys['65'][0]);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".swatch {\r\n  width: 15px;\r\n  height: 1px;\r\n  background-color: coral;\r\n  display: inline-block;\r\n  margin-right: 20px;\r\n}\r\n\r\n.swatch.px-1 {\r\n  height: 1px;\r\n}\r\n.swatch.px-2 {\r\n  height: 2px;\r\n}\r\n.swatch.px-3 {\r\n  height: 3px;\r\n}\r\n.swatch.px-4 {\r\n  height: 4px;\r\n}\r\n.swatch.px-6 {\r\n  height: 6px;\r\n}\r\n.swatch.px-8 {\r\n  height: 8px;\r\n}\r\n.swatch.px-10 {\r\n  height: 10px;\r\n}\r\n.swatch.px-15 {\r\n  height: 15px;\r\n}\r\n",
                    "styleUrl": "./colorjs-view.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "cus",
                        "type": "ColorUtilService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 49,
                "jsdoctags": [
                    {
                        "name": "cus",
                        "type": "ColorUtilService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<main>\r\n  <h1>Colorjs assessment</h1>\r\n\r\n  <p>Color library created by Lea Verou<sup>a</sup></p>\r\n\r\n  <h2>Install and Import</h2>\r\n\r\n  <p>\r\n    <code>npm install colorjs.io</code>\r\n  </p>\r\n\r\n  <p>\r\n    <code>import Color from 'colorjs.io'</code>\r\n  </p>\r\n\r\n  <h2>Text Examples<sub>using reference Font \"Arial\"</sub></h2>\r\n\r\n  <h3>By Font Size</h3>\r\n\r\n  <h4>14px</h4>\r\n  <div class=\"example-area\">\r\n    <p id=\"s14-400\" class=\"w400\">\r\n      APCA reports lightness contrast as an Lc value from Lc 0 to Lc 106 for\r\n      dark text on a light background, and Lc 0 to Lc -108 for light text on a\r\n      dark background (dark mode). The minus sign merely indicates negative\r\n      contrast, which means light text on a dark background.\r\n    </p>\r\n\r\n    <p id=\"s14-700\" class=\"w700\">\r\n      APCA reports lightness contrast as an Lc value from Lc 0 to Lc 106 for\r\n      dark text on a light background, and Lc 0 to Lc -108 for light text on a\r\n      dark background (dark mode). The minus sign merely indicates negative\r\n      contrast, which means light text on a dark background.\r\n    </p>\r\n  </div>\r\n\r\n  <h4>21px</h4>\r\n  <div class=\"example-area\">\r\n    <p id=\"s21-400\" class=\"w400\" [style.fontSize]=\"'21px'\">\r\n      APCA reports lightness contrast as an Lc value from Lc 0 to Lc 106 for\r\n      dark text on a light background, and Lc 0 to Lc -108 for light text on a\r\n      dark background (dark mode). The minus sign merely indicates negative\r\n      contrast, which means light text on a dark background.\r\n    </p>\r\n\r\n    <p id=\"s21-700\" class=\"w700\" [style.fontSize]=\"'21px'\">\r\n      APCA reports lightness contrast as an Lc value from Lc 0 to Lc 106 for\r\n      dark text on a light background, and Lc 0 to Lc -108 for light text on a\r\n      dark background (dark mode). The minus sign merely indicates negative\r\n      contrast, which means light text on a dark background.\r\n    </p>\r\n  </div>\r\n\r\n  <h2>APCA Colors, Minimum Object Size</h2>\r\n\r\n  <h3>90<sub>equiv. WCAG 2.1 7</sub></h3>\r\n\r\n  <div\r\n    *ngFor=\"let item of greys['90']\"\r\n    [style.backgroundColor]=\"item\"\r\n    class=\"swatch\"\r\n  ></div>\r\n\r\n  <h3>60<sub>equiv. WCAG 2.1 3</sub></h3>\r\n\r\n  <div\r\n    *ngFor=\"let item of greys['60']\"\r\n    [style.backgroundColor]=\"item\"\r\n    class=\"swatch px-2\"\r\n  ></div>\r\n\r\n  <h3>50</h3>\r\n  <div\r\n    *ngFor=\"let item of greys['50']\"\r\n    [style.backgroundColor]=\"item\"\r\n    class=\"swatch px-3\"\r\n  ></div>\r\n\r\n  <h3>45</h3>\r\n\r\n  <div\r\n    *ngFor=\"let item of greys['45']\"\r\n    [style.backgroundColor]=\"item\"\r\n    class=\"swatch px-4\"\r\n  ></div>\r\n\r\n  <h3>30</h3>\r\n\r\n  <div\r\n    *ngFor=\"let item of greys['30']\"\r\n    [style.backgroundColor]=\"item\"\r\n    class=\"swatch px-6\"\r\n  ></div>\r\n\r\n  <h3>25</h3>\r\n\r\n  <div\r\n    *ngFor=\"let item of greys['25']\"\r\n    [style.backgroundColor]=\"item\"\r\n    class=\"swatch px-8\"\r\n  ></div>\r\n\r\n  <h3>20</h3>\r\n\r\n  <div\r\n    *ngFor=\"let item of greys['20']\"\r\n    [style.backgroundColor]=\"item\"\r\n    class=\"swatch px-10\"\r\n  ></div>\r\n\r\n  <h3>15</h3>\r\n\r\n  <div\r\n    *ngFor=\"let item of greys['15']\"\r\n    [style.backgroundColor]=\"item\"\r\n    class=\"swatch px-15\"\r\n  ></div>\r\n</main>\r\n\r\n<hr />\r\n\r\n<footer>\r\n  <h2>Notes</h2>\r\n\r\n  <sup>a</sup>Co-author on CSS 4 specification.\r\n</footer>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-a557eec14f72c438a8033301f4d6ce023e0a1844a3b06ec2b38794a612acc31735ae78a5ee10071b230c8c20d699eb914554e69d07ade54adb371da8efb464cc",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-header',\n  template: `<header>\n    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            primary\n            size=\"small\"\n            primary=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>`,\n  styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n\nsvg {\n  display: inline-block;\n  vertical-align: top;\n}\n\nh1 {\n  font-weight: 900;\n  font-size: 20px;\n  line-height: 1;\n  margin: 6px 0 6px 10px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nbutton + button {\n  margin-left: 10px;\n}\n\n.welcome {\n  color: #333;\n  font-size: 14px;\n  margin-right: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "ImageCanvasComponent",
            "id": "component-ImageCanvasComponent-887a3e959622946d125238873b3c0e55c7f7c38eda7bfe1744624d5b4a50e9c18fbfdf273c144de052af60d10259daaf9b61febe813fa86c9d4d15b92c317e11",
            "file": "src/app/image-canvas/image-canvas.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image-canvas",
            "styleUrls": [
                "./image-canvas.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./image-canvas.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-image-canvas',\n  templateUrl: './image-canvas.component.html',\n  styleUrls: ['./image-canvas.component.css']\n})\nexport class ImageCanvasComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  border: coral 3px dashed;\r\n  box-sizing: border-box;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\n:host * {\r\n  border: red 1px solid;\r\n}\r\n\r\ncanvas {\r\n}\r\n",
                    "styleUrl": "./image-canvas.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<h2>image canvas</h2>\n\n<canvas></canvas>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-7126d8c2607c946741c651482413b43feb72b2d63cac9d3ac173fde206a5e635eb4cdbf7ca7ac9327c7d4d05cf7ef619144c34c11609ad677081d0ee4e855064",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 64
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { User } from './User';\n\n@Component({\n  selector: 'storybook-page',\n  template: `<article>\n    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>`,\n  styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 14px;\n  line-height: 24px;\n  padding: 48px 20px;\n  margin: 0 auto;\n  max-width: 600px;\n  color: #333;\n}\n\nsection h2 {\n  font-weight: 900;\n  font-size: 32px;\n  line-height: 1;\n  margin: 0 0 4px;\n  display: inline-block;\n  vertical-align: top;\n}\n\nsection p {\n  margin: 1em 0;\n}\n\nsection a {\n  text-decoration: none;\n  color: #1ea7fd;\n}\n\nsection ul {\n  padding-left: 30px;\n  margin: 1em 0;\n}\n\nsection li {\n  margin-bottom: 8px;\n}\n\nsection .tip {\n  display: inline-block;\n  border-radius: 1em;\n  font-size: 11px;\n  line-height: 12px;\n  font-weight: 700;\n  background: #e7fdd8;\n  color: #66bf3c;\n  padding: 4px 12px;\n  margin-right: 10px;\n  vertical-align: top;\n}\n\nsection .tip-wrapper {\n  font-size: 13px;\n  line-height: 20px;\n  margin-top: 40px;\n  margin-bottom: 40px;\n}\n\nsection .tip-wrapper svg {\n  display: inline-block;\n  height: 12px;\n  width: 12px;\n  margin-right: 4px;\n  vertical-align: top;\n  margin-top: 3px;\n}\n\nsection .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-3154df648e49b4905280892f1bca418caa3f6c36ec465a5442f578ec3865933499646b2a69120c2b2821f46bc8e46f1dd6b80d90593e274f784a69128bdd9b4f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { ChromajsViewComponent } from './chromajs-view/chromajs-view.component';\r\nimport { ColorjsViewComponent } from './colorjs-view/colorjs-view.component';\nimport { ImageCanvasComponent } from './image-canvas/image-canvas.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    ChromajsViewComponent,\r\n    ColorjsViewComponent,\r\n    ImageCanvasComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ChromajsViewComponent"
                        },
                        {
                            "name": "ColorjsViewComponent"
                        },
                        {
                            "name": "ImageCanvasComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/chromajs-view/chromajs-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ChromajsViewComponent>",
                "defaultValue": "(args: ChromajsViewComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/image-canvas/image-canvas.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ImageCanvasComponent>",
                "defaultValue": "(args: ImageCanvasComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/chromajs-view/chromajs-view.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Typical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/image-canvas/image-canvas.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n  props: args,\n})"
                }
            ],
            "src/app/chromajs-view/chromajs-view.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/chromajs-view/chromajs-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ChromajsViewComponent>",
                    "defaultValue": "(args: ChromajsViewComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/chromajs-view/chromajs-view.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "src/app/image-canvas/image-canvas.stories.ts": [
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/image-canvas/image-canvas.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ImageCanvasComponent>",
                    "defaultValue": "(args: ImageCanvasComponent) => ({\r\n  props: args,\r\n})"
                },
                {
                    "name": "Typical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/image-canvas/image-canvas.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/chromajs-view/chromajs-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ChromajsViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/chromajs-view/chromajs-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/chromajs-view/chromajs-view.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/colorjs-view/colorjs-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ColorjsViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/image-canvas/image-canvas.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageCanvasComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/image-canvas/image-canvas.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/image-canvas/image-canvas.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Typical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ColorUtilService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/services/color-util.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ApcaColorVariantsObj",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/User.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}